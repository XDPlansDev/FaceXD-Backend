// Caminho: /routes/users.js
// Atualiza√ß√£o: rota GET /me, busca por username, seguir/deixar de seguir e busca por nome/username

const express = require("express");
const router = express.Router();
const User = require("../models/User");
const { authenticateToken } = require("../middleware/authMiddleware");

/**
 * @route   GET /api/users/search?query=valor
 * @desc    Buscar usu√°rios por nome, username ou email
 * @access  P√∫blico
 */
router.get("/search", async (req, res) => {
  const query = req.query.query;

  console.log("üîç Rota de busca acionada. Termo:", query);

  if (!query || query.trim() === "") {
    return res.status(400).json({ error: "Query de busca n√£o informada." });
  }

  try {
    const users = await User.find({
      $or: [
        { name: { $regex: query, $options: "i" } },
        { username: { $regex: query, $options: "i" } },
        { email: { $regex: query, $options: "i" } }, // Adicionado suporte a email
      ],
    })
      .limit(10)
      .select("name username avatar");

    console.log(`üîé ${users.length} usu√°rios encontrados.`);
    res.json(users);
  } catch (err) {
    console.error("‚ùå Erro ao buscar usu√°rios:", err);
    res.status(500).json({ error: "Erro ao buscar usu√°rios." });
  }
});

/**
 * @route   GET /api/users/:id
 * @desc    Obter perfil p√∫blico de um usu√°rio pelo ID
 * @access  P√∫blico
 */
router.get("/:id", async (req, res) => {
  try {
    console.log(`üîç Buscando usu√°rio pelo ID: ${req.params.id}`);
    const user = await User.findById(req.params.id).select("-password");

    if (!user) {
      console.warn("‚ö†Ô∏è Usu√°rio n√£o encontrado por ID.");
      return res.status(404).json({ message: "Usu√°rio n√£o encontrado." });
    }

    res.status(200).json(user);
  } catch (err) {
    console.error("‚ùå Erro ao buscar usu√°rio por ID:", err);
    res.status(500).json({ message: "Erro ao buscar usu√°rio." });
  }
});

/**
 * @route   GET /api/users/username/:username
 * @desc    Obter perfil p√∫blico de um usu√°rio pelo username
 * @access  P√∫blico
 */
router.get("/username/:username", async (req, res) => {
  try {
    console.log(`üîç Buscando usu√°rio pelo username: ${req.params.username}`);
    const user = await User.findOne({ username: req.params.username }).select("-password");

    if (!user) {
      console.warn("‚ö†Ô∏è Usu√°rio n√£o encontrado por username.");
      return res.status(404).json({ message: "Usu√°rio n√£o encontrado." });
    }

    res.status(200).json(user);
  } catch (err) {
    console.error("‚ùå Erro ao buscar usu√°rio por username:", err);
    res.status(500).json({ message: "Erro ao buscar usu√°rio." });
  }
});

/**
 * @route   GET /api/users/me
 * @desc    Obter perfil do usu√°rio autenticado
 * @access  Privado
 */
router.get("/me", authenticateToken, async (req, res) => {
  try {
    console.log(`üë§ Obtendo dados do usu√°rio autenticado: ID ${req.user.id}`);

    let user = await User.findById(req.user.id).select("-password");

    if (!user) {
      console.warn("‚ö†Ô∏è Usu√°rio autenticado n√£o encontrado.");
      return res.status(404).json({ message: "Usu√°rio n√£o encontrado." });
    }

    // üõ°Ô∏è Previne erros no frontend garantindo campos opcionais
    if (!user.usernameChangedAt) user.usernameChangedAt = user.createdAt;
    if (!user.sexo) user.sexo = '';
    if (!user.dataNascimento) user.dataNascimento = '';

    res.status(200).json(user);
  } catch (err) {
    console.error("‚ùå Erro ao buscar perfil do usu√°rio logado:", err);
    res.status(500).json({ message: "Erro ao buscar usu√°rio." });
  }
});

/**
 * @route   PUT /api/users/:id/follow
 * @desc    Seguir um usu√°rio
 * @access  Privado
 */
router.put("/:id/follow", authenticateToken, async (req, res) => {
  try {
    const userIdToFollow = req.params.id;

    if (req.user.id === userIdToFollow) {
      return res.status(400).json({ message: "Voc√™ n√£o pode se seguir." });
    }

    const userToFollow = await User.findById(userIdToFollow);
    const currentUser = await User.findById(req.user.id);

    if (!userToFollow) {
      return res.status(404).json({ message: "Usu√°rio a ser seguido n√£o encontrado." });
    }

    if (!currentUser) {
      return res.status(404).json({ message: "Usu√°rio logado n√£o encontrado." });
    }

    // Verifica se j√° est√° seguindo
    if (!userToFollow.followers.includes(req.user.id)) {
      userToFollow.followers.push(req.user.id);
      currentUser.following.push(userIdToFollow);

      await userToFollow.save();
      await currentUser.save();

      console.log(`‚úÖ ${currentUser.username} come√ßou a seguir ${userToFollow.username}`);
      res.status(200).json({ message: "Usu√°rio seguido com sucesso." });
    } else {
      console.warn("‚ö†Ô∏è Tentativa de seguir um usu√°rio j√° seguido.");
      res.status(400).json({ message: "Voc√™ j√° segue este usu√°rio." });
    }
  } catch (err) {
    console.error("‚ùå Erro ao seguir usu√°rio:", err);
    res.status(500).json({ message: "Erro ao seguir usu√°rio." });
  }
});

/**
 * @route   PUT /api/users/:id/follow
 * @desc    Seguir um usu√°rio
 * @access  Privado
 */

router.put("/:id/follow", authenticateToken, async (req, res) => {
  try {
    const userToFollow = await User.findById(req.params.id);
    const currentUser = await User.findById(req.user.id);

    if (!userToFollow || !currentUser) {
      return res.status(404).json({ message: "Usu√°rio n√£o encontrado." });
    }

    if (userToFollow.followers.includes(req.user.id)) {
      return res.status(400).json({ message: "Voc√™ j√° segue este usu√°rio." });
    }

    userToFollow.followers.push(req.user.id);
    currentUser.following.push(req.params.id);

    await userToFollow.save();
    await currentUser.save();

    res.status(200).json({ message: "Usu√°rio seguido com sucesso." });
  } catch (err) {
    console.error("Erro ao seguir usu√°rio:", err);
    res.status(500).json({ message: "Erro ao seguir usu√°rio." });
  }
});


/**
 * @route   PUT /api/users/:id/unfollow
 * @desc    Deixar de seguir um usu√°rio
 * @access  Privado
 */
router.put("/:id/unfollow", authenticateToken, async (req, res) => {
  try {
    const userIdToUnfollow = req.params.id;

    if (req.user.id === userIdToUnfollow) {
      return res.status(400).json({ message: "Voc√™ n√£o pode deixar de se seguir." });
    }

    const userToUnfollow = await User.findById(userIdToUnfollow);
    const currentUser = await User.findById(req.user.id);

    if (!userToUnfollow) {
      return res.status(404).json({ message: "Usu√°rio a ser deixado de seguir n√£o encontrado." });
    }

    if (!currentUser) {
      return res.status(404).json({ message: "Usu√°rio logado n√£o encontrado." });
    }

    if (userToUnfollow.followers.includes(req.user.id)) {
      userToUnfollow.followers.pull(req.user.id);
      currentUser.following.pull(userIdToUnfollow);

      await userToUnfollow.save();
      await currentUser.save();

      console.log(`‚ö†Ô∏è ${currentUser.username} deixou de seguir ${userToUnfollow.username}`);
      res.status(200).json({ message: "Voc√™ deixou de seguir este usu√°rio." });
    } else {
      console.warn("‚ö†Ô∏è Tentativa de deixar de seguir um usu√°rio que n√£o √© seguido.");
      res.status(400).json({ message: "Voc√™ n√£o segue este usu√°rio." });
    }
  } catch (err) {
    console.error("‚ùå Erro ao deixar de seguir usu√°rio:", err);
    res.status(500).json({ message: "Erro ao deixar de seguir usu√°rio." });
  }
});

/**
 * @route   PUT /api/users/:id/favorite
 * @desc    Favoritar um usu√°rio
 * @access  Privado
 */
router.put("/:id/favorite", authenticateToken, async (req, res) => {
  try {
    const userIdToFavorite = req.params.id;

    if (req.user.id === userIdToFavorite) {
      return res.status(400).json({ message: "Voc√™ n√£o pode se favoritar." });
    }

    const currentUser = await User.findById(req.user.id);

    if (!currentUser) {
      return res.status(404).json({ message: "Usu√°rio logado n√£o encontrado." });
    }

    // Verifica se j√° est√° favoritado
    if (!currentUser.favoritos.includes(userIdToFavorite)) {
      currentUser.favoritos.push(userIdToFavorite);
      await currentUser.save();

      console.log(`‚≠ê ${currentUser.username} favoritou o usu√°rio ${userIdToFavorite}`);
      res.status(200).json({ message: "Usu√°rio favoritado com sucesso." });
    } else {
      console.warn("‚ö†Ô∏è Tentativa de favoritar um usu√°rio j√° favoritado.");
      res.status(400).json({ message: "Voc√™ j√° favoritou este usu√°rio." });
    }
  } catch (err) {
    console.error("‚ùå Erro ao favoritar usu√°rio:", err);
    res.status(500).json({ message: "Erro ao favoritar usu√°rio." });
  }
});

/**
 * @route   PUT /api/users/:id/unfavorite
 * @desc    Desfavoritar um usu√°rio
 * @access  Privado
 */
router.put("/:id/unfavorite", authenticateToken, async (req, res) => {
  try {
    const userIdToUnfavorite = req.params.id;

    if (req.user.id === userIdToUnfavorite) {
      return res.status(400).json({ message: "Voc√™ n√£o pode se desfavoritar." });
    }

    const currentUser = await User.findById(req.user.id);

    if (!currentUser) {
      return res.status(404).json({ message: "Usu√°rio logado n√£o encontrado." });
    }

    if (currentUser.favoritos.includes(userIdToUnfavorite)) {
      currentUser.favoritos.pull(userIdToUnfavorite);
      await currentUser.save();

      console.log(`‚ö†Ô∏è ${currentUser.username} desfavoritou o usu√°rio ${userIdToUnfavorite}`);
      res.status(200).json({ message: "Usu√°rio desfavoritado com sucesso." });
    } else {
      console.warn("‚ö†Ô∏è Tentativa de desfavoritar um usu√°rio que n√£o est√° favoritado.");
      res.status(400).json({ message: "Voc√™ n√£o favoritou este usu√°rio." });
    }
  } catch (err) {
    console.error("‚ùå Erro ao desfavoritar usu√°rio:", err);
    res.status(500).json({ message: "Erro ao desfavoritar usu√°rio." });
  }
});

module.exports = router;
